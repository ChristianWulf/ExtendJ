buildscript {
	repositories.mavenCentral()
	dependencies {
		classpath group: 'org.jastadd', name: 'jastaddgradle', version: '1.9.6'
	}
}

repositories {
	mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jastadd'
apply plugin: 'eclipse'

jastadd {
	modules 'jastadd_modules'

	// Target module:
	// Call Gradle with -Djastadd.module="..." to select module to build (default is "java7 backend")
	// remember to run the 'clean' task if a new target module is specified!
	module = System.properties['jastadd.module'] ?: "java7 backend"
	println "Building ${module.name}"

	astPackage = "org.extendj.ast"
	genDir = "src/gen"
	buildInfoDir = "src/gen-res"
	parser.name = "JavaParser"
}

// Add main classes depending on target module.
if (jastadd.module.name.endsWith('backend')) {
	// Add the backend main classes.
	mainClassName = 'org.extendj.JavaCompiler'
	sourceSets {
		main.java.srcDir 'src/backend-main'
		main.java.srcDir 'src/frontend-main' // include JastAddJVersion
	}
} else {
	mainClassName = 'org.extendj.JavaChecker'
	sourceSets {
		main.java.srcDir 'src/frontend-main'
	}
}

jar.baseName = 'extendj'
jar.manifest.attributes 'Main-Class': mainClassName
jar.destinationDir = projectDir

// Set javac -source and -target flags.
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

dependencies {
	// Ant is needed to build the ExtendJ Ant task.
	compile group: 'org.apache.ant', name: 'ant', version: '1.9.4'
}

sourceSets {
	main {
		resources {
			srcDir 'src/res'
			srcDir jastadd.buildInfoDir
		}
	}
}

processResources.dependsOn 'updateVersionString'

// Use git describe to update the version string.
task updateVersionString << {
	def out = new StringBuilder()
	def err = new StringBuilder()
	def command = ['git', 'describe']
	def proc = command.execute()
	proc.waitForProcessOutput(out, err)
	if (proc.exitValue()) {
		println "warning: failed to run git describe to update version name"
		println "${err}"
	} else {
		if (err) println "${err}"
		def outputFile = file('src/res/Version.properties')
		ant.propertyfile(file: outputFile) {
			entry(key: 'version', value: out.toString().readLines()[0])
		}
		command = ['git', 'update-index', '--assume-unchanged', outputFile.path]
		out.setLength(0)
		err.setLength(0)
		proc = command.execute()
		proc.waitForProcessOutput(out, err)
		if (proc.exitValue()) {
			println 'warning: git update-index failed'
			println "${err}"
		}
	}
}

// Fix the .classpath file for the generated Eclipse project.
eclipse.classpath.file {
	beforeMerged { classpath ->
		classpath.entries << new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/frontend', null)
		classpath.entries << new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/backend', null)
		if (jastadd.module.name.contains('java8'))
			classpath.entries << new org.gradle.plugins.ide.eclipse.model.SourceFolder('java8/src', null)
	}
	withXml { node ->
		def gen = node.asNode().find { it.@kind == 'src' && it.@path == 'src/gen/java' }
		if (gen?.children()?.isEmpty())
			gen.appendNode('attributes').appendNode('attribute', [ name: 'ignore_optional_problems', value: 'true' ])
	}
}

