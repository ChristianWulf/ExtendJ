/* Copyright (c) 2005-2008, Torbjorn Ekman
 *                    2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect EnumsCodegen {
  // Add flags to enums.
  public static final int Modifiers.ACC_ENUM = 0x4000;

  eq EnumDecl.flags() = super.flags() | Modifiers.ACC_ENUM;

  syn int EnumConstant.flags() {
    int flags = Modifiers.ACC_ENUM;
    if (isPublic()) {
      flags |= Modifiers.ACC_PUBLIC;
    }
    if (isPrivate()) {
      flags |= Modifiers.ACC_PRIVATE;
    }
    if (isProtected()) {
      flags |= Modifiers.ACC_PROTECTED;
    }
    if (isStatic()) {
      flags |= Modifiers.ACC_STATIC;
    }
    if (isFinal()) {
      flags |= Modifiers.ACC_FINAL;
    }
    if (isVolatile()) {
      flags |= Modifiers.ACC_VOLATILE;
    }
    if (isTransient()) {
      flags |= Modifiers.ACC_TRANSIENT;
    }
    if (isSynthetic()) {
      flags |= Modifiers.ACC_SYNTHETIC;
    }
    return flags;
  }

  // Transform enum switch statements into integer indexed switch statements.
  public void SwitchStmt.transformation() {
    if (getExpr().type().isEnumDecl()) {
      TypeDecl type = getExpr().type();
      hostType().createEnumArray(type);
      hostType().createEnumMethod(type);
      setExpr(
        hostType().createEnumMethod(type).createBoundAccess(new List()).qualifiesAccess(
        new ArrayAccess(
            ((Expr) getExpr().treeCopyNoTransform()).qualifiesAccess(
                new MethodAccess("ordinal", new List())))));
    }
    super.transformation();
  }

  public void ConstCase.transformation() {
    if (getValue() instanceof VarAccess && getValue().varDecl() instanceof EnumConstant) {
      int i = hostType().createEnumIndex((EnumConstant) getValue().varDecl());
      setValue(Literal.buildIntegerLiteral(i));
    }
    super.transformation();
  }

  protected MethodDecl TypeDecl.enumMethod = null;

  // TODO(joqvist): Remove side effects by using collection to collect enum index methods.
  protected MethodDecl TypeDecl.createEnumMethod(TypeDecl enumDecl) {
    if (enumMethod != null) {
      return enumMethod;
    }
    MethodDecl m = new MethodDecl(
      new Modifiers(new List<Modifier>(
          new Modifier("static"),
          new Modifier("final"),
          new Modifier("private"))),
      typeInt().arrayType().createQualifiedAccess(),
      "$SwitchMap$" + enumDecl.fullName().replace('.', '$'),
      new List(),
      new List(),
      new Opt<Block>(
        new Block(
          new List<Stmt>(
            new IfStmt(
              new EQExpr(
                createEnumArray(enumDecl).createBoundAccess(),
                new NullLiteral("null")
              ),
              AssignExpr.asStmt(
                createEnumArray(enumDecl).createBoundAccess(),
                new ArrayCreationExpr(
                  new ArrayTypeWithSizeAccess(
                    typeInt().createQualifiedAccess(),
                    enumDecl.createQualifiedAccess().qualifiesAccess(
                        new MethodAccess("values", new List())).qualifiesAccess(
                        new VarAccess("length"))
                  ),
                  new Opt()
                )
              ),
              new Opt()
            ),
            new ReturnStmt(
              createEnumArray(enumDecl).createBoundAccess()
            )
          )
        )
      )
    );
    // Add method declaration as a body declaration.
    getBodyDeclList().insertChild(m, 1);
    // Trigger possible rewrites.
    enumMethod = (MethodDecl) getBodyDeclList().getChild(1);
    return enumMethod;
  }

  // Compute index of enum constants.
  private HashMap TypeDecl.createEnumIndexMap = null;

  syn lazy int TypeDecl.createEnumIndex(EnumConstant e) {
    if (createEnumIndexMap == null) {
      createEnumIndexMap = new HashMap();
    }
    if (!createEnumIndexMap.containsKey(e.hostType())) {
      createEnumIndexMap.put(e.hostType(), new Integer(0));
    }
    Integer i = (Integer) createEnumIndexMap.get(e.hostType());
    i = new Integer(i.intValue() + 1);
    createEnumIndexMap.put(e.hostType(), i);

    MethodDecl m = createEnumMethod(e.hostType());
    List list = m.getBlock().getStmtList();
    list.insertChild(
      new TryStmt(
        new Block(
          new List().add(
            AssignExpr.asStmt(
              createEnumArray(e.hostType()).createBoundAccess().qualifiesAccess(
                new ArrayAccess(
                  e.createBoundAccess().qualifiesAccess(
                      new MethodAccess("ordinal", new List()))
                )
              ),
              Literal.buildIntegerLiteral(i.intValue())
            )
          )
        ),
        new List().add(
          new BasicCatch(
            new ParameterDeclaration(
              lookupType("java.lang", "NoSuchFieldError").createQualifiedAccess(),
              "e"
            ),
            new Block(
              new List()
            )
          )
        ),
        new Opt()
      ),
      list.getNumChild() - 1
    );
    return i.intValue();
  }

  // Static field with array contents..
  syn lazy FieldDeclarator TypeDecl.createEnumArray(TypeDecl enumDecl) {
    FieldDeclarator decl = new FieldDeclarator(
        "$SwitchMap$" + enumDecl.fullName().replace('.', '$'),
        new List<Dims>(),
        new Opt<Expr>());
    FieldDecl f = new FieldDecl(
        new Modifiers(new List<Modifier>(
            new Modifier("static"),
            new Modifier("final"),
            new Modifier("private"))),
        typeInt().arrayType().createQualifiedAccess(),
        new List<FieldDeclarator>(decl));
    // Add field declaration as a body declaration.
    getBodyDeclList().insertChild(f, 0);
    // Trigger possible rewrites.
    return decl;
  }

  @Override
  protected void EnumDecl.generateBytecodes(CodeGeneration gen) {
    for (BodyDecl b : getBodyDeclList()) {
      if (b instanceof FieldDecl) {
        FieldDecl field = (FieldDecl) b;
        if (field.isStatic()) {
          for (FieldDeclarator decl : field.getDeclaratorList()) {
            if (decl.hasInit()) {
              decl.emitInitializerBCode(gen);
              emitStoreField(gen, decl, this);
            }
          }
        }
      } else if (b instanceof StaticInitializer) {
        b.createBCode(gen);
      } else if (b instanceof EnumConstant) {
        EnumConstant cons = (EnumConstant) b;
        cons.emitInitializerBCode(gen);
        emitStoreField(gen, cons, this);
      }
    }
    gen.emitReturn();
  }

  protected void EnumConstant.emitInitializerBCode(CodeGeneration gen) {
    getInit().createBCode(gen);
    getInit().type().emitAssignConvTo(gen, type());
  }

  @Override
  protected void EnumDecl.generateFields(DataOutputStream out, ConstantPool cp) throws IOException {
    Collection<FieldDeclarator> fields = fieldDeclarations();
    Collection<EnumConstant> constants = new ArrayList<EnumConstant>();
    for (BodyDecl b : getBodyDeclList()) {
      if (b instanceof EnumConstant) {
        constants.add((EnumConstant) b);
      }
    }
    out.writeChar(constants.size() + fields.size());
    for (EnumConstant cons : constants) {
      out.writeChar(cons.flags());
      out.writeChar(cp.addUtf8(cons.name()));
      out.writeChar(cp.addUtf8(cons.type().typeDescriptor()));
      out.writeChar(0);
    }
    for (FieldDeclarator field : fields) {
      out.writeChar(field.flags());
      out.writeChar(cp.addUtf8(field.name()));
      out.writeChar(cp.addUtf8(field.type().typeDescriptor()));
      out.writeChar(field.attributes().size());
      for (Attribute attribute : field.attributes()) {
        attribute.emit(out);
      }
    }
  }

  public boolean EnumConstant.clear() {
    // Don't clear this node because it resets the parent pointer and prevents
    // things using this node as a variable declaration from working.
    return false;
  }
}
