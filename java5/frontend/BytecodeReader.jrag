/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 *
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

import java.io.BufferedInputStream;
import java.io.DataInputStream;

aspect BytecodeReader {

  public class BytecodeParser implements Flags, BytecodeReader {
    public CompilationUnit read(InputStream is, String fullName, Program p)
        throws FileNotFoundException, IOException {
      return new BytecodeParser(is, fullName).parse(null, null, p);
    }

    public static final boolean VERBOSE = false;

    private DataInputStream is;
    public CONSTANT_Class_Info classInfo;
    public String outerClassName;
    public String name;

    public BytecodeParser(InputStream in, String name) {
      this.is = new DataInputStream(new BufferedInputStream(in));
      this.name = name;
    }

    public BytecodeParser() {
      this("");
    }

    public BytecodeParser(String name) {
      if (!name.endsWith(".class")) {
        name = name.replace('.', '/') + ".class";
      }
      this.name = name;
    }

    public int next() throws IOException {
      return is.read();
    }

    public int u1() throws IOException {
      return is.readUnsignedByte();
    }

    public int u2() throws IOException {
      return is.readUnsignedShort();
    }

    public int u4() throws IOException {
      return is.readInt();
    }

    public int readInt() throws IOException {
      return is.readInt();
    }

    public float readFloat() throws IOException {
      return is.readFloat();
    }

    public long readLong() throws IOException {
      return is.readLong();
    }

    public double readDouble() throws IOException {
      return is.readDouble();
    }

    public String readUTF() throws IOException {
      return is.readUTF();
    }

    public void skip(int length) throws IOException {
      while (length > 0) {
        length -= is.skip(length);
      }
    }

    public void error(String s) {
      throw new RuntimeException(s);
    }

    public void print(String s) {
      //System.out.print(s);
    }

    public void println(String s) {
      print(s + "\n");
    }

    public void println() {
      print("\n");
    }

    public CompilationUnit parse(TypeDecl outerTypeDecl, String outerClassName,
        Program classPath, boolean isInner)
        throws FileNotFoundException, IOException {
      isInnerClass = isInner;
      return parse(outerTypeDecl, outerClassName, classPath);
    }

    public CompilationUnit parse(TypeDecl outerTypeDecl, String outerClassName, Program program)
        throws FileNotFoundException, IOException {

      if (BytecodeParser.VERBOSE) {
        println("Parsing byte codes in " + name);
      }

      this.outerClassName = outerClassName;
      parseMagic();
      parseMinor();
      parseMajor();
      parseConstantPool();
      CompilationUnit cu = new CompilationUnit();
      TypeDecl typeDecl = parseTypeDecl();
      cu.setPackageDecl(classInfo.packageDecl());
      cu.addTypeDecl(typeDecl);
      parseFields(typeDecl);
      parseMethods(typeDecl);
      //parse attributes, and if we have an inner class, then execute the branch...
      if (new Attributes.TypeAttributes(this, typeDecl, outerTypeDecl, program).isInnerClass()) {
        //this is a workaround for the fact that JastAdd stores inner classes as members of
        //their outer classes, even for inner classes that come from bytecode;
        //to avoid having inner classes show up as top-level classes, we remove them here
        //from the compilation unit again...

        //first add the cu to the program, so that getTypeDecls() won't fail
        program.addCompilationUnit(cu);
        //then clear the cu
        for (int i=0;i<cu.getTypeDecls().getNumChild();i++) {
          cu.getTypeDecls().removeChild(i);
        }
        //and remove the cu from the program again
        program.getCompilationUnits().removeChild(program.getCompilationUnits().getIndexOfChild(cu));
      }

      return cu;
    }

    public void parseMagic() throws IOException {
      if (next() != 0xca || next() != 0xfe || next() != 0xba || next() != 0xbe) {
        error("magic error");
      }
    }

    public void parseMinor() throws IOException {
      int low = u1();
      int high = u1();
      if (BytecodeParser.VERBOSE) {
        println("Minor: " + high + "." + low);
      }
    }

    public void parseMajor() throws IOException {
      int low = u1();
      int high = u1();
      if (BytecodeParser.VERBOSE) {
        println("Major: " + high + "." + low);
      }
    }

    public boolean isInnerClass = false;

    public TypeDecl parseTypeDecl() throws IOException {
      int flags = u2();
      Modifiers modifiers = modifiers(flags & 0xfddf);
      if ((flags & (ACC_INTERFACE | ACC_ENUM)) == ACC_ENUM) {
        // Modifiers <ID:String> /[SuperClass:Access]/ Implements:Access* BodyDecl*;
        EnumDecl decl = new EnumDecl();
        decl.setModifiers(modifiers);
        decl.setID(parseThisClass());
        Access superClass = parseSuperClass();
        // TODO attempting to set NTA child?
        decl.setImplementsList(parseInterfaces(new List()));
        return decl;
      } else if ((flags & ACC_INTERFACE) == 0) {
        ClassDecl decl = new ClassDecl();
        decl.setModifiers(modifiers);
        decl.setID(parseThisClass());
        Access superClass = parseSuperClass();
        decl.setSuperClassOpt(superClass == null ? new Opt()
            : new Opt(superClass));
        decl.setImplementsList(parseInterfaces(new List()));
        return decl;
      } else if ((flags & ACC_ANNOTATION) == 0) {
        InterfaceDecl decl = new InterfaceDecl();
        decl.setModifiers(modifiers);
        decl.setID(parseThisClass());
        Access superClass = parseSuperClass();
        decl.setSuperInterfaceList(
            parseInterfaces(
              superClass == null ? new List()
              : new List().add(superClass)));
        return decl;
      } else {
        AnnotationDecl decl = new AnnotationDecl();
        decl.setModifiers(modifiers);
        decl.setID(parseThisClass());
        Access superClass = parseSuperClass();
        parseInterfaces(
            superClass == null ? new List()
            : new List().add(superClass));
        return decl;
      }
    }

    public String parseThisClass() throws IOException {
      int index = u2();
      CONSTANT_Class_Info info = (CONSTANT_Class_Info) constantPool[index];
      classInfo = info;
      return info.simpleName();
    }

    public Access parseSuperClass() throws IOException {
      int index = u2();
      if (index == 0) {
        return null;
      }
      CONSTANT_Class_Info info = (CONSTANT_Class_Info) constantPool[index];
      return info.access();
    }

    public List parseInterfaces(List list) throws IOException {
      int count = u2();
      for (int i = 0; i < count; i++) {
        CONSTANT_Class_Info info = (CONSTANT_Class_Info) constantPool[u2()];
        list.add(info.access());
      }
      return list;
    }

    public static Access fromClassName(String s) {
      // Sample ClassName: a/b/c$d$e
      // the package name ends at the last '/'
      // after that follows a list of type names separated by '$'
      // all except the first are nested types

      String packageName = "";
      int index = s.lastIndexOf('/');
      if (index != -1) {
        packageName = s.substring(0, index).replace('/', '.');
      }
      String typeName = s.substring(index + 1, s.length());
      if (typeName.indexOf('$') != -1) {
        return new BytecodeTypeAccess(packageName, typeName);
      } else {
        return new TypeAccess(packageName, typeName);
      }
    }

    public static Modifiers modifiers(int flags) {
      Modifiers m = new Modifiers();
      if ((flags & 0x0001) != 0) {
        m.addModifier(new Modifier("public"));
      }
      if ((flags & 0x0002) != 0) {
        m.addModifier(new Modifier("private"));
      }
      if ((flags & 0x0004) != 0) {
        m.addModifier(new Modifier("protected"));
      }
      if ((flags & 0x0008) != 0) {
        m.addModifier(new Modifier("static"));
      }
      if ((flags & 0x0010) != 0) {
        m.addModifier(new Modifier("final"));
      }
      if ((flags & 0x0020) != 0) {
        m.addModifier(new Modifier("synchronized"));
      }
      if ((flags & 0x0040) != 0) {
        m.addModifier(new Modifier("volatile"));
      }
      if ((flags & 0x0080) != 0) {
        m.addModifier(new Modifier("transient"));
      }
      if ((flags & 0x0100) != 0) {
        m.addModifier(new Modifier("native"));
      }
      if ((flags & 0x0400) != 0) {
        m.addModifier(new Modifier("abstract"));
      }
      if ((flags & 0x0800) != 0) {
        m.addModifier(new Modifier("strictfp"));
      }
      return m;
    }

    public void parseFields(TypeDecl typeDecl) throws IOException {
      int count = u2();
      if (BytecodeParser.VERBOSE) {
        println("Fields (" + count + "):");
      }
      for (int i = 0; i < count; i++) {
        if (BytecodeParser.VERBOSE) {
          print(" Field nbr " + i + " ");
        }
        FieldInfo fieldInfo = new FieldInfo(this);
        if (!fieldInfo.isSynthetic()) {
          typeDecl.addBodyDecl(fieldInfo.bodyDecl());
        }
      }
    }

    public void parseMethods(TypeDecl typeDecl) throws IOException {
      int count = u2();
      if (BytecodeParser.VERBOSE) {
        println("Methods (" + count + "):");
      }
      for (int i = 0; i < count; i++) {
        if (BytecodeParser.VERBOSE) {
          print("  Method nbr " + i + " ");
        }
        MethodInfo info = new MethodInfo(this);
        if (!info.isSynthetic() && !info.name.equals("<clinit>")) {
          typeDecl.addBodyDecl(info.bodyDecl());
        }
      }
    }

    public CONSTANT_Info[] constantPool = null;

    private void checkLengthAndNull(int index) {
      if (index >= constantPool.length) {
        throw new Error("Trying to access element " + index  + " in constant pool of length " + constantPool.length);
      }
      if (constantPool[index] == null) {
        throw new Error("Unexpected null element in constant pool at index " + index);
      }
    }

    public boolean validConstantPoolIndex(int index) {
      return index < constantPool.length && constantPool[index] != null;
    }

    public CONSTANT_Info getCONSTANT_Info(int index) {
      checkLengthAndNull(index);
      return constantPool[index];
    }

    public CONSTANT_Utf8_Info getCONSTANT_Utf8_Info(int index) {
      checkLengthAndNull(index);
      CONSTANT_Info info = constantPool[index];
      if (!(info instanceof CONSTANT_Utf8_Info)) {
        throw new Error("Expected CONSTANT_Utf8_info at " + index + " in constant pool but found " + info.getClass().getName());
      }
      return (CONSTANT_Utf8_Info) info;
    }

    public CONSTANT_Class_Info getCONSTANT_Class_Info(int index) {
      checkLengthAndNull(index);
      CONSTANT_Info info = constantPool[index];
      if (!(info instanceof CONSTANT_Class_Info)) {
        throw new Error("Expected CONSTANT_Class_info at " + index + " in constant pool but found " + info.getClass().getName());
      }
      return (CONSTANT_Class_Info) info;
    }

    public void parseConstantPool() throws IOException {
      int count = u2();
      if (BytecodeParser.VERBOSE) {
        println("constant_pool_count: " + count);
      }
      constantPool = new CONSTANT_Info[count + 1];
      for (int i = 1; i < count; i++) {
        parseConstantPoolEntry(i);
        if (constantPool[i] instanceof CONSTANT_Long_Info
            || constantPool[i] instanceof CONSTANT_Double_Info)
          i++;
      }
    }

    private static final int CONSTANT_Class = 7;
    private static final int CONSTANT_FieldRef = 9;
    private static final int CONSTANT_MethodRef = 10;
    private static final int CONSTANT_InterfaceMethodRef = 11;
    private static final int CONSTANT_String = 8;
    private static final int CONSTANT_Integer = 3;
    private static final int CONSTANT_Float = 4;
    private static final int CONSTANT_Long = 5;
    private static final int CONSTANT_Double = 6;
    private static final int CONSTANT_NameAndType = 12;
    private static final int CONSTANT_Utf8 = 1;

    public void parseConstantPoolEntry(int i) throws IOException {
      int tag = u1();
      switch (tag) {
        case CONSTANT_Class:
          constantPool[i] = new CONSTANT_Class_Info(this);
          break;
        case CONSTANT_FieldRef:
          constantPool[i] = new CONSTANT_Fieldref_Info(this);
          break;
        case CONSTANT_MethodRef:
          constantPool[i] = new CONSTANT_Methodref_Info(this);
          break;
        case CONSTANT_InterfaceMethodRef:
          constantPool[i] = new CONSTANT_InterfaceMethodref_Info(this);
          break;
        case CONSTANT_String:
          constantPool[i] = new CONSTANT_String_Info(this);
          break;
        case CONSTANT_Integer:
          constantPool[i] = new CONSTANT_Integer_Info(this);
          break;
        case CONSTANT_Float:
          constantPool[i] = new CONSTANT_Float_Info(this);
          break;
        case CONSTANT_Long:
          constantPool[i] = new CONSTANT_Long_Info(this);
          break;
        case CONSTANT_Double:
          constantPool[i] = new CONSTANT_Double_Info(this);
          break;
        case CONSTANT_NameAndType:
          constantPool[i] = new CONSTANT_NameAndType_Info(this);
          break;
        case CONSTANT_Utf8:
          constantPool[i] = new CONSTANT_Utf8_Info(this);
          break;
        default:
          println("Unknown entry: " + tag);
      }
    }

  }


  public class Signatures {
    // simple parser framework
    String data;
    int pos;
    public Signatures(String s) {
      data = s;
      pos = 0;
    }

    public boolean next(String s) {
      for (int i = 0; i < s.length(); i++) {
        if (data.charAt(pos + i) != s.charAt(i)) {
          return false;
        }
      }
      return true;
    }

    public void eat(String s) {
      for (int i = 0; i < s.length(); i++) {
        if (data.charAt(pos + i) != s.charAt(i)) {
          error(s);
        }
      }
      pos += s.length();
    }

    public void error(String s) {
      throw new Error("Expected " + s + " but found " + data.substring(pos));
    }

    public String identifier() {
      int i = pos;
      while (Character.isJavaIdentifierPart(data.charAt(i))) {
        i++;
      }
      String result = data.substring(pos, i);
      pos = i;
      return result;
    }

    public boolean eof() {
      return pos == data.length();
    }

    // 4.4.4 Signatures

    public static class ClassSignature extends Signatures {
      public ClassSignature(String s) {
        super(s);
        classSignature();
      }
      void classSignature() {
        if (next("<")) {
          formalTypeParameters();
        }
        superclassSignature = parseSuperclassSignature();
        while (!eof()) {
          superinterfaceSignature.add(parseSuperinterfaceSignature());
        }
      }

      public boolean hasFormalTypeParameters() { return typeParameters != null; }
      public List typeParameters() { return typeParameters; }

      public boolean hasSuperclassSignature() { return superclassSignature != null; }
      public Access superclassSignature() { return superclassSignature; }
      protected Access superclassSignature;

      public boolean hasSuperinterfaceSignature() { return superinterfaceSignature.getNumChildNoTransform() != 0; }
      public List superinterfaceSignature() { return superinterfaceSignature; }
      protected List superinterfaceSignature = new List();

      Access parseSuperclassSignature() {
        return classTypeSignature();
      }

      Access parseSuperinterfaceSignature() {
        return classTypeSignature();
      }
    }

    public static class FieldSignature extends Signatures {
      public FieldSignature(String s) {
        super(s);
        fieldTypeAccess = fieldTypeSignature();
      }
      Access fieldTypeAccess() {
        return fieldTypeAccess;
      }
      private Access fieldTypeAccess;
    }

    public static class MethodSignature extends Signatures {
      public MethodSignature(String s) {
        super(s);
        methodTypeSignature();
      }
      void methodTypeSignature() {
        if (next("<")) {
          formalTypeParameters();
        }
        eat("(");
        while (!next(")")) {
          parameterTypes.add(typeSignature());
        }
        eat(")");
        returnType = parseReturnType();
        while (!eof()) {
          exceptionList.add(throwsSignature());
        }
      }
      Access parseReturnType() {
        if (next("V")) {
          eat("V");
          return new PrimitiveTypeAccess("void");
        } else {
          return typeSignature();
        }
      }

      Access throwsSignature() {
        eat("^");
        if (next("L")) {
          return classTypeSignature();
        } else {
          return typeVariableSignature();
        }
      }

      public boolean hasFormalTypeParameters() { return typeParameters != null; }
      public List typeParameters() { return typeParameters; }

      public Collection parameterTypes() { return parameterTypes; }
      protected Collection parameterTypes = new ArrayList();

      public List exceptionList() { return exceptionList; }
      public boolean hasExceptionList() { return exceptionList.getNumChildNoTransform() != 0; }
      protected List exceptionList = new List();

      protected Access returnType = null;
      public boolean hasReturnType() { return returnType != null; }
      public Access returnType() { return returnType; }
    }

    protected List typeParameters;

    void formalTypeParameters() {
      eat("<");
      typeParameters = new List();
      do {
        typeParameters.add(formalTypeParameter());
      } while (!next(">"));
      eat(">");
    }

    TypeVariable formalTypeParameter() {
      String id = identifier();
      List bounds = new List();
      Access classBound = classBound();
      if (classBound != null) {
        bounds.add(classBound);
      }
      while (next(":")) {
        bounds.add(interfaceBound());
      }
      if (bounds.getNumChildNoTransform() == 0) {
        bounds.add(new TypeAccess("java.lang", "Object"));
      }
      return new TypeVariable(new Modifiers(new List()), id, new List(), bounds);
    }

    Access classBound() {
      eat(":");
      if (nextIsFieldTypeSignature()) {
        return fieldTypeSignature();
      } else {
        return null;
        //return new TypeAccess("java.lang", "Object");
      }
    }

    Access interfaceBound() {
      eat(":");
      return fieldTypeSignature();
    }


    Access fieldTypeSignature() {
      if (next("L")) {
        return classTypeSignature();
      } else if (next("[")) {
        return arrayTypeSignature();
      } else if (next("T")) {
        return typeVariableSignature();
      } else {
        error("L or [ or T");
      }
      return null; // error never returns
    }
    boolean nextIsFieldTypeSignature() {
      return next("L") || next("[") || next("T");
    }

    Access classTypeSignature() {
      eat("L");
      // Package and Type Name
      StringBuilder packageName = new StringBuilder();
      String typeName = identifier();
      while (next("/")) {
        eat("/");
        if (packageName.length() != 0) {
          packageName.append(".");
        }
        packageName.append(typeName);
        typeName = identifier();
      }
      Access a = typeName.indexOf('$') == -1 ?
        new TypeAccess(packageName.toString(), typeName) :
        new BytecodeTypeAccess(packageName.toString(), typeName);
      if (next("<")) { // type arguments of top level type
        a = new ParTypeAccess(a, typeArguments());
      }
      while (next(".")) { // inner classes
        a = a.qualifiesAccess(classTypeSignatureSuffix());
      }
      eat(";");
      return a;
    }

    Access classTypeSignatureSuffix() {
      eat(".");
      String id = identifier();
      Access a = id.indexOf('$') == -1 ?
        new TypeAccess(id) : new BytecodeTypeAccess("", id);
      if (next("<")) {
        a = new ParTypeAccess(a, typeArguments());
      }
      return a;
    }

    Access typeVariableSignature() {
      eat("T");
      String id = identifier();
      eat(";");
      return new TypeAccess(id);
    }

    List typeArguments() {
      eat("<");
      List list = new List();
      do {
        list.add(typeArgument());
      } while (!next(">"));
      eat(">");
      return list;
    }

    Access typeArgument() {
      if (next("*")) {
        eat("*");
        return new Wildcard();
      } else if (next("+")) {
        eat("+");
        return new WildcardExtends(fieldTypeSignature());
      } else if (next("-")) {
        eat("-");
        return new WildcardSuper(fieldTypeSignature());
      } else {
        return fieldTypeSignature();
      }
    }

    Access arrayTypeSignature() {
      eat("[");
      return new ArrayTypeAccess(typeSignature());
    }

    Access typeSignature() {
      if (nextIsFieldTypeSignature()) {
        return fieldTypeSignature();
      } else {
        return baseType();
      }
    }

    Access baseType() {
      if (next("B")) { eat("B"); return new PrimitiveTypeAccess("byte"); } else if (next("C")) { eat("C"); return new PrimitiveTypeAccess("char"); } else if (next("D")) { eat("D"); return new PrimitiveTypeAccess("double"); } else if (next("F")) { eat("F"); return new PrimitiveTypeAccess("float"); } else if (next("I")) { eat("I"); return new PrimitiveTypeAccess("int"); } else if (next("J")) { eat("J"); return new PrimitiveTypeAccess("long"); } else if (next("S")) { eat("S"); return new PrimitiveTypeAccess("short"); } else if (next("Z")) { eat("Z"); return new PrimitiveTypeAccess("boolean"); }
      error("baseType");
      return null; // error never returns
    }
  }

  public interface Flags {
    public int ACC_PUBLIC = 0x0001;
    public int ACC_PRIVATE = 0x0002;
    public int ACC_PROTECTED = 0x0004;
    public int ACC_STATIC = 0x0008;
    public int ACC_FINAL = 0x0010;
    public int ACC_SUPER = 0x0020;
    public int ACC_SYNCHRONIZED = 0x0020;
    public int ACC_VOLATILE = 0x0040;
    public int ACC_BRIDGE = 0x0040;
    public int ACC_TRANSIENT = 0x0080;
    public int ACC_VARARGS = 0x0080;
    public int ACC_NATIVE = 0x0100;
    public int ACC_INTERFACE = 0x0200;
    public int ACC_ABSTRACT = 0x0400;
    public int ACC_STRICT = 0x0800;
    public int ACC_SYNTHETIC = 0x1000;
    public int ACC_ANNOTATION = 0x2000;
    public int ACC_ENUM = 0x4000;
  }
}
