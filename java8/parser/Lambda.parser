Expr primary_no_new_array = lambda_expression;

Expr lambda_expression =
	LPAREN RPAREN RARROW lambda_body.b
		{: return new LambdaExpression(new EmptyLambdaParameter(), b); :}
;

Expr lambda_expression  =
	name.n RARROW lambda_body.b
		{: return new LambdaExpression(new InferredLambdaParameter(n,new List()), b); :}
;

Expr lambda_expression  =
	LPAREN name.n name_list.l? RPAREN RARROW lambda_body.b
		{: return new LambdaExpression(new InferredLambdaParameter(n,l), b); :}
;

Expr lambda_expression =
	LPAREN nongeneric_formal_parameter.f formal_parameter_list_2.l? RPAREN RARROW lambda_body.b
		{: return new LambdaExpression(new DeclaredLambdaParameter(f, l), b); :}
	| LPAREN modifiers.m? name.n LT type_argument_list_1.a dims.d1? IDENTIFIER.i dims.d2? formal_parameter_list_2.l? RPAREN RARROW lambda_body.b
		{: return new LambdaExpression(new DeclaredLambdaParameter(
			new ParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).addArrayDims(d1).addArrayDims(d2), i),l), b); :}
	| LPAREN modifiers.m? name.n LT type_argument_list_1.a DOT class_or_interface_type.t dims.d1? IDENTIFIER.i dims.d2? formal_parameter_list_2.l? RPAREN RARROW lambda_body.b 
		{: return new LambdaExpression(new DeclaredLambdaParameter(
			new ParameterDeclaration(new Modifiers(m), new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(d1).addArrayDims(d2), i),l), b); :}
;

List name_list = 
	COMMA name.n {: return new List().add(n); :}
	| COMMA name.n name_list.l {: return l.add(n); :}
;

List formal_parameter_list_2 =
	COMMA formal_parameter.f {: return new List().add(f); :}
	| COMMA formal_parameter.f formal_parameter_list_2.l {: return l.add(f); :}
;


LambdaBody lambda_body =
	block.b {: return new BlockLambdaBody(b); :}
	| expression.e {: return new ExpressionLambdaBody(e); :}
;

