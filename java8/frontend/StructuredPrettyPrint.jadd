aspect StructuredPrettyPrint {
  public String ASTNode.structuredPrettyPrint() {
      StringBuffer sb = new StringBuffer();
      // first, transform the tree by wrapping all expressions in ParExpr
      wrapExprs();
      prettyPrint(sb);
      return sb.toString().trim();
  }

  /**
   * Hacky way of inserting parens around all expressions.
   */
  private void ASTNode.wrapExprs() {
    for (int i = 0; i < getNumChildNoTransform(); ++i) {
      ASTNode child = getChildNoTransform(i);
      if (child instanceof Expr &&
          !(child instanceof ParExpr) &&
          !(child instanceof Access) &&
          !(child instanceof Literal)) {
        child.setParent(null);
        ParExpr parExpr = new ParExpr((Expr) child);
        setChild(parExpr, i);
      }
      child.wrapExprs();
    }
  }
}
