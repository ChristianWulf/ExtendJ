aspect ReturnCompatible {
	syn lazy boolean BlockLambdaBody.voidCompatible();
	syn lazy boolean BlockLambdaBody.valueCompatible();
	
	//15.27.2
	eq BlockLambdaBody.voidCompatible() = noReturnsHasResult();
	eq BlockLambdaBody.valueCompatible() = allReturnsHasResult() && !getBlock().canCompleteNormally();
	
	public boolean BlockLambdaBody.noReturnsHasResult() {
		TypeDecl host = ((LambdaExpr)getParent()).hostType();
		ASTNode currentNode = getBlock();
		LinkedList<ASTNode> nodes = new LinkedList<ASTNode>();
		for(int i = 0; i < currentNode.getNumChild(); i++) {
			nodes.addLast(currentNode.getChild(i));
		}
		while(true) {
			currentNode = nodes.poll();
			if(currentNode == null) {
				break;
			}
			else if(currentNode instanceof LambdaExpr) {
				continue;
			}
			else if(currentNode instanceof ReturnStmt) {
				ReturnStmt returnStmt = (ReturnStmt)currentNode;
				if(returnStmt.hostType() != host) {
					continue;
				}
				else if(returnStmt.hasResult()) {
					return false;
				}
			}
			for(int i = 0; i < currentNode.getNumChild(); i++) {
				nodes.addLast(currentNode.getChild(i));
			}
			
		}
		return true;	
	}
	public boolean BlockLambdaBody.allReturnsHasResult() {
		TypeDecl host = ((LambdaExpr)getParent()).hostType();
		ASTNode currentNode = getBlock();
		LinkedList<ASTNode> nodes = new LinkedList<ASTNode>();
		for(int i = 0; i < currentNode.getNumChild(); i++) {
			nodes.addLast(currentNode.getChild(i));
		}
		while(true) {
			currentNode = nodes.poll();
			if(currentNode == null) {
				break;
			}
			else if(currentNode instanceof LambdaExpr) {
				continue;
			}
			else if(currentNode instanceof ReturnStmt) {
				ReturnStmt returnStmt = (ReturnStmt)currentNode;
				if(returnStmt.hostType() != host) {
					continue;
				}
				else if(!returnStmt.hasResult()) {
					return false;
				}
			}
			for(int i = 0; i < currentNode.getNumChild(); i++) {
				nodes.addLast(currentNode.getChild(i));
			}
			
		}
		return true;
	}
}