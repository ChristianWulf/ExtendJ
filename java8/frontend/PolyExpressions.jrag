aspect PolyExpressions {
	syn lazy boolean Expr.isBooleanExpression() {
		return type().isBoolean();
	}
	
	eq ParExpr.isBooleanExpression() {
		return getExpr().isBooleanExpression();
	}
	
	eq ClassInstanceExpr.isBooleanExpression() {
		if(getAccess() instanceof TypeAccess) {
			TypeAccess typeAccess = (TypeAccess)getAccess();
			return typeAccess.name().equals("Boolean");
		}
		return false;
	}
	
	eq MethodAccess.isBooleanExpression() {
		MethodDecl decl = decl();
		if(decl instanceof ParMethodDecl) {
			return ((ParMethodDecl)decl).genericMethodDecl().type().isBoolean();
		}
		else
			return decl.type().isBoolean();
	}
	
	eq ConditionalExpr.isBooleanExpression() {
		return isBooleanConditional();
	}
	
	syn lazy boolean ConditionalExpr.isBooleanConditional() {
		return getTrueExpr().isBooleanExpression() && getFalseExpr().isBooleanExpression();
	}
	
	
	syn lazy boolean Expr.isNumericExpression() {
		return type().isNumericType();
	}
	
	eq MethodAccess.isNumericExpression() {
		MethodDecl decl = decl();
		if(decl instanceof ParMethodDecl) {
			return ((ParMethodDecl)decl).genericMethodDecl().type().isNumericType();
		}
		else
			return decl.type().isNumericType();
	}
	
	eq ConditionalExpr.isNumericExpression() {
		return isNumericConditional();
	}
	
	syn lazy boolean ConditionalExpr.isNumericConditional() {
		return getTrueExpr().isNumericExpression() && getFalseExpr().isNumericExpression();
	}
	
	syn lazy boolean ConditionalExpr.isReferenceConditional() {
		return !isBooleanConditional() && !isNumericConditional();
	}
	
	syn lazy boolean ConditionalExpr.isPolyExpression() {
		return isReferenceConditional() && (assignmentContext() || invocationContext());
	}
	
	syn lazy boolean ClassInstanceExpr.isPolyExpression() {
		return (getAccess() instanceof DiamondAccess) && (assignmentContext() || invocationContext());
	}
}