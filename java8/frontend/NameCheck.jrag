aspect Java8NameCheck {
	inh BodyDecl InferredParameterDeclaration.enclosingBodyDecl();
	inh VariableScope InferredParameterDeclaration.outerScope();
	inh VariableScope LambdaParameters.outerScope();
	
	//6.3
	eq LambdaExpr.getLambdaParameters().outerScope() = this;
	eq LambdaExpr.getLambdaBody().outerScope() = this;
	
	public void InferredParameterDeclaration.nameCheck() {
		SimpleSet decls = outerScope().lookupVariable(name());
		for(Iterator iter = decls.iterator(); iter.hasNext(); ) {
			Variable var = (Variable)iter.next();
			if(var instanceof VariableDeclaration) {
				VariableDeclaration decl = (VariableDeclaration)var;
				if (decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of parameter " + name());
			} 
			else if(var instanceof ParameterDeclaration) {
				ParameterDeclaration decl = (ParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of parameter " + name());
			}
			else if(var instanceof InferredParameterDeclaration) {
				InferredParameterDeclaration decl = (InferredParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of parameter " + name());
			}  
			else if(var instanceof CatchParameterDeclaration) {
				CatchParameterDeclaration decl = (CatchParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of parameter " + name());
			}
		}
	
		// 8.4.1
		if(!lookupVariable(name()).contains(this)) {
			error("duplicate declaration of parameter " + name());
		}
	}
	
	refine MultiCatch
	public void CatchParameterDeclaration.nameCheck() {
		SimpleSet decls = outerScope().lookupVariable(name());
		for(Iterator iter = decls.iterator(); iter.hasNext(); ) {
			Variable var = (Variable)iter.next();
			if(var instanceof VariableDeclaration) {
				VariableDeclaration decl = (VariableDeclaration)var;
				if (decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of " + "catch parameter " + name());
			} 
			else if(var instanceof ParameterDeclaration) {
				ParameterDeclaration decl = (ParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of "+ "catch parameter " + name());
			} 
			else if(var instanceof InferredParameterDeclaration) {
				InferredParameterDeclaration decl = (InferredParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of "+ "catch parameter " + name());
			} 
			else if (var instanceof CatchParameterDeclaration) {
				CatchParameterDeclaration decl = (CatchParameterDeclaration)var;
				if (decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of " + "catch parameter " + name());
			}
		}
	
		// 8.4.1
		if (!lookupVariable(name()).contains(this))
			error("duplicate declaration of catch parameter " + name());
	}

	refine MultiCatch
	public void ParameterDeclaration.nameCheck() {
		SimpleSet decls = outerScope().lookupVariable(name());
		for(Iterator iter = decls.iterator(); iter.hasNext(); ) {
			Variable var = (Variable)iter.next();
			if(var instanceof VariableDeclaration) {
				VariableDeclaration decl = (VariableDeclaration)var;
				if (decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of parameter " + name());
			} 
			else if(var instanceof ParameterDeclaration) {
				ParameterDeclaration decl = (ParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of parameter " + name());
			}
			else if(var instanceof InferredParameterDeclaration) {
				InferredParameterDeclaration decl = (InferredParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of parameter " + name());
			} 
			else if(var instanceof CatchParameterDeclaration) {
				CatchParameterDeclaration decl = (CatchParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of parameter " + name());
			}
		}

		// 8.4.1
		if(!lookupVariable(name()).contains(this)) {
			error("duplicate declaration of parameter " + name());
		}
	}


	refine MultiCatch
	public void VariableDeclaration.nameCheck() {
		SimpleSet decls = outerScope().lookupVariable(name());
		for(Iterator iter = decls.iterator(); iter.hasNext(); ) {
			Variable var = (Variable)iter.next();
			if(var instanceof VariableDeclaration) {
				VariableDeclaration decl = (VariableDeclaration)var;
				if(decl != this && decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of local variable " + name());
			}
			// 8.4.1
			else if(var instanceof ParameterDeclaration) {
				ParameterDeclaration decl = (ParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of local variable " + name());
			} 
			else if(var instanceof CatchParameterDeclaration) {
				CatchParameterDeclaration decl = (CatchParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of local variable " + name());
			} 
			else if(var instanceof InferredParameterDeclaration) {
				InferredParameterDeclaration decl = (InferredParameterDeclaration)var;
				if(decl.enclosingBodyDecl() == enclosingBodyDecl())
					error("duplicate declaration of local variable " + name());
			}
		}
		if(getParent().getParent() instanceof Block) {
			Block block = (Block)getParent().getParent();
			for(int i = 0; i < block.getNumStmt(); i++) {
				if(block.getStmt(i) instanceof Variable) {
					Variable v = (Variable)block.getStmt(i);
					if(v.name().equals(name()) && v != this) {
						error("duplicate declaration of local variable " + name());
					}
				}
			}
		}
	}
	
	refine NameCheck
	public void VarAccess.nameCheck() {
		if(decls().isEmpty() && (!isQualified() || !qualifier().type().isUnknown() || qualifier().isPackageAccess()))
			error("no field named " + name() + " is accessible");
		if (decls().size() > 1) {
			StringBuffer sb = new StringBuffer();
			sb.append("several fields named " + name());
			for (Iterator iter = decls().iterator(); iter.hasNext(); ) {
				Variable v = (Variable)iter.next();
				sb.append("\n    " + v.type().typeName() + "." + v.name() + " declared in " + v.hostType().typeName());
			}
			error(sb.toString());
		}

		// 8.8.5.1
		if(inExplicitConstructorInvocation() && !isQualified() && decl().isInstanceVariable() && hostType() == decl().hostType())
			error("instance variable " + name() + " may not be accessed in an explicit constructor invocation");

		Variable v = decl();
		if(!v.isFinal() && !v.isEffectivelyFinal() && !v.isClassVariable() && !v.isInstanceVariable() && v.hostType() != hostType())
			error("A parameter/variable used but not declared in an inner class must be final or effectively final");
		

		// 8.3.2.3
		if ((decl().isInstanceVariable() || decl().isClassVariable()) && !isQualified()) {
			if (hostType() != null && !hostType().declaredBeforeUse(decl(), this)) {
				if (inSameInitializer() && !simpleAssignment() && inDeclaringClass()) {
					BodyDecl b = closestBodyDecl(hostType());
					error("variable " + decl().name() + " is used in " + b.prettyPrint() + " before it is declared");
				}
			}
		}
		
		// 15.27.2
		if(!v.isClassVariable() && !v.isInstanceVariable() && enclosingLambda() != null) {
			if(v instanceof ParameterDeclaration) {
				ParameterDeclaration decl = (ParameterDeclaration)v;
				if(decl.enclosingLambda() != enclosingLambda()) {
					if(!decl.isEffectivelyFinal() && !decl.isFinal())
						error("Parameter " + v.name() + " must be effectively final");
				}
			}
			else if(v instanceof InferredParameterDeclaration) {
				InferredParameterDeclaration decl = (InferredParameterDeclaration)v;
				if(decl.enclosingLambda() != enclosingLambda()) {
					if(!decl.isEffectivelyFinal() && !decl.isFinal())
						error("Parameter " + v.name() + " must be effectively final");
				}
			}
			else if(v instanceof VariableDeclaration) {
				VariableDeclaration decl = (VariableDeclaration)v;
				if(decl.enclosingLambda() != enclosingLambda()) {
					if(!decl.isEffectivelyFinal() && !decl.isFinal())
						error("Variable " + v.name() + " must be effectively final");
					if(!enclosingLambda().isDAbefore(decl))
						error("Variable " + v.name() + " must be definitely assigned before used in a lambda");
				}
			}
		}
		
	}
}