/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect PrettyPrint {
  eq InferredParameterDeclaration.dumpString() = getClass().getName() + " [" + name() + "]";
  eq MethodReference.dumpString() = getClass().getName() + " [" + name() + "]";

  public void ClassReference.prettyPrint(StringBuffer sb) {
    getTypeAccess().prettyPrint(sb);
    sb.append("::");
    if (getNumTypeArgument() > 0) {
      sb.append("<");
      getTypeArgument(0).prettyPrint(sb);
      for (int i = 1; i < getNumTypeArgument(); i++) {
        sb.append(", ");
        getTypeArgument(i).prettyPrint(sb);
      }
      sb.append(">");
    }
    sb.append("new");
  }

  public void ArrayReference.prettyPrint(StringBuffer sb) {
    getTypeAccess().prettyPrint(sb);
    sb.append("::");
    sb.append("new");
  }

  public void ExprMethodReference.prettyPrint(StringBuffer sb) {
    getExpr().prettyPrint(sb);
    sb.append("::");
    if (getNumTypeArgument() > 0) {
      sb.append("<");
      getTypeArgument(0).prettyPrint(sb);
      for (int i = 1; i < getNumTypeArgument(); i++) {
        sb.append(", ");
        getTypeArgument(i).prettyPrint(sb);
      }
      sb.append(">");
    }
    sb.append(name());
  }

  public void TypeMethodReference.prettyPrint(StringBuffer sb) {
    getTypeAccess().prettyPrint(sb);
    sb.append("::");
    if (getNumTypeArgument() > 0) {
      sb.append("<");
      getTypeArgument(0).prettyPrint(sb);
      for (int i = 1; i < getNumTypeArgument(); i++) {
        sb.append(", ");
        getTypeArgument(i).prettyPrint(sb);
      }
      sb.append(">");
    }
    sb.append(name());
  }

  public void IntersectionCastExpr.prettyPrint(StringBuffer sb) {
    sb.append("(");
    getTypeAccess().prettyPrint(sb);
    if (getNumTypeList() > 0) {
      sb.append(" & ");
      getTypeList(0).prettyPrint(sb);
      for(int i = 1; i < getNumTypeList(); i++) {
        sb.append(" & ");
        getTypeList(i).prettyPrint(sb);
      }
    }
    sb.append(")");
    getExpr().prettyPrint(sb);
  }

  public void LambdaExpr.prettyPrint(StringBuffer sb) {
    getLambdaParameters().prettyPrint(sb);
    sb.append(" -> ");
    getLambdaBody().prettyPrint(sb);
  }

  public void InferredLambdaParameters.prettyPrint(StringBuffer sb) {
    sb.append("(");
    getParameter(0).prettyPrint(sb);
    for (int i = 1; i < getNumParameter(); i++) {
      sb.append(", ");
      getParameter(i).prettyPrint(sb);
    }
    sb.append(")");
  }

  public void InferredParameterDeclaration.prettyPrint(StringBuffer sb) {
    sb.append(name());
  }

  public void DeclaredLambdaParameters.prettyPrint(StringBuffer sb) {
    sb.append("(");
    if (getNumParameter() > 0) {
      getParameter(0).prettyPrint(sb);
      for (int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).prettyPrint(sb);
      }
    }
    sb.append(")");
  }

  public void BlockLambdaBody.prettyPrint(StringBuffer sb) {
    getBlock().prettyPrint(sb);
  }

  public void ExprLambdaBody.prettyPrint(StringBuffer sb) {
    getExpr().prettyPrint(sb);
  }
}
