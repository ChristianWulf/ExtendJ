/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Modifiers {
	syn lazy boolean Modifiers.isDefault() = numModifier("default") != 0;
	
	syn lazy boolean MethodDecl.isDefault() = getModifiers().isDefault();
	
	refine Modifiers
	eq MethodDecl.isAbstract() { 
		return getModifiers().isAbstract() || (hostType().isInterfaceDecl() && !isStatic() && !isDefault());
	}
	
	
	// 8.4.3
	refine Enums
	public void MethodDecl.checkModifiers() {
		super.checkModifiers();
		if(hostType().isClassDecl()) {
			// 8.4.3.1
			if(!hostType().isEnumDecl() && isAbstract() && !hostType().isAbstract())
				error("class must be abstract to include abstract methods");
			// 8.4.3.1
			if(isAbstract() && isPrivate())
				error("method may not be abstract and private");
			// 8.4.3.1
			// 8.4.3.2
			if(isAbstract() && isStatic())
				error("method may not be abstract and static");
			if(isAbstract() && isSynchronized())
				error("method may not be abstract and synchronized");
			// 8.4.3.4
			if(isAbstract() && isNative())
				error("method may not be abstract and native");
			if(isAbstract() && isStrictfp())
				error("method may not be abstract and strictfp");
			if(isNative() && isStrictfp())
				error("method may not be native and strictfp");
		}
		if(hostType().isInterfaceDecl()) {
			// 9.4
			if(isAbstract()) {
				if(isStatic())
					error("interface method " + signature() + " in " + 
							hostType().typeName() + " can not be both abstract and static");
				if(isDefault())
					error("interface method " + signature() + " in " + 
							hostType().typeName() + " can not be both abstract and default");
				if(isStrictfp())
					error("interface method " + signature() + " in " + 
							hostType().typeName() + " can not be both abstract and strictfp");
			}
			if(isStatic() && isDefault())
				error("interface method " + signature() + " in " + 
							hostType().typeName() + " can not be both static and default");
			if(isNative())
				error("interface method " + signature() + " in " +
						hostType().typeName() +  " may not be native");
			if(isSynchronized())
				error("interface method " + signature() + " in " +
						hostType().typeName() +  " may not be synchronized");
			if(isProtected())
				error("interface method " + signature() + " in " +
						hostType().typeName() +  " may not be protected");
			if(isPrivate())
				error("interface method " + signature() + " in " +
						hostType().typeName() +  " may not be private");
			else if(isFinal())
				error("interface method " + signature() + " in " +
						hostType().typeName() +  " may not be final");
		}
	}
	
	
	
	// 8.4.3
	refine Modifiers
	public void Modifiers.checkModifiers() {
		refined();
		if(numModifier("default") > 1)
			error("only one default allowed");
	}
	
	
}
