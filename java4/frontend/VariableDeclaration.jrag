/* Copyright (c) 2005-2008, Torbjorn Ekman
 *               2011-2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect Variables {
  VariableDecl implements Variable;

  syn boolean VariableDecl.isParameter() = false;

  // 4.5.3
  syn boolean VariableDecl.isClassVariable() = false;
  syn boolean VariableDecl.isInstanceVariable() = false;
  syn boolean VariableDecl.isMethodParameter() = false;
  syn boolean VariableDecl.isConstructorParameter() = false;
  syn boolean VariableDecl.isExceptionHandlerParameter() = false;
  syn boolean VariableDecl.isLocalVariable() = true;
  // 4.5.4
  syn boolean VariableDecl.isFinal() = getModifiers().isFinal();
  syn boolean VariableDecl.isVolatile() = getModifiers().isVolatile();
  syn boolean VariableDecl.isBlank() = !hasInit();
  syn boolean VariableDecl.isStatic() = false;

  syn String VariableDecl.name() = getID();

  syn lazy Constant VariableDecl.constant() = type().cast(getInit().constant());

  FieldDeclaration implements Variable;
  syn boolean FieldDeclaration.isParameter() = false;
  // 4.5.3
  syn boolean FieldDeclaration.isClassVariable() = isStatic() || hostType().isInterfaceDecl();
  syn boolean FieldDeclaration.isInstanceVariable() = (hostType().isClassDecl() || hostType().isAnonymous() )&& !isStatic();
  syn boolean FieldDeclaration.isMethodParameter() = false;
  syn boolean FieldDeclaration.isConstructorParameter() = false;
  syn boolean FieldDeclaration.isExceptionHandlerParameter() = false;
  syn boolean FieldDeclaration.isLocalVariable() = false;

  syn boolean FieldDeclaration.isBlank() = !hasInit();

  syn String FieldDeclaration.name() = getID();
  syn lazy Constant FieldDeclaration.constant() = type().cast(getInit().constant());

  ParameterDeclaration implements Variable;
  syn boolean ParameterDeclaration.isParameter() = true;

  // 4.5.3
  syn boolean ParameterDeclaration.isClassVariable() = false;
  syn boolean ParameterDeclaration.isInstanceVariable() = false;
  inh boolean ParameterDeclaration.isMethodParameter();
  inh boolean ParameterDeclaration.isConstructorParameter();
  inh boolean ParameterDeclaration.isExceptionHandlerParameter();
  syn boolean ParameterDeclaration.isLocalVariable() = false;

  // 4.5.3
  eq ConstructorDecl.getParameter().isMethodParameter() = false;
  eq ConstructorDecl.getParameter().isConstructorParameter() = true;
  eq ConstructorDecl.getParameter().isExceptionHandlerParameter() = false;
  eq MethodDecl.getParameter().isMethodParameter() = true;
  eq MethodDecl.getParameter().isConstructorParameter() = false;
  eq MethodDecl.getParameter().isExceptionHandlerParameter() = false;
  eq BasicCatch.getParameter().isMethodParameter() = false;
  eq BasicCatch.getParameter().isConstructorParameter() = false;
  eq BasicCatch.getParameter().isExceptionHandlerParameter() = true;

  eq Program.getChild().isMethodParameter() = false;
  eq Program.getChild().isConstructorParameter() = false;
  eq Program.getChild().isExceptionHandlerParameter() = false;

  // 4.5.4
  syn boolean ParameterDeclaration.isFinal() = getModifiers().isFinal();
  syn boolean ParameterDeclaration.isVolatile() = getModifiers().isVolatile();
  syn boolean ParameterDeclaration.isBlank() = true;
  syn boolean ParameterDeclaration.isStatic() = false;

  syn String ParameterDeclaration.name() = getID();

  syn boolean ParameterDeclaration.hasInit() = false;
  syn Expr ParameterDeclaration.getInit() {
    throw new UnsupportedOperationException();
  }
  syn Constant ParameterDeclaration.constant() {
    throw new UnsupportedOperationException();
  }
}

aspect VariableDeclarationTransformation {
  // When splitting a FieldDecl into multiple FieldDeclarations, provide every
  // FieldDeclaration with a reference to the original FieldDecl. If only a
  // single FieldDeclaration results, no reference is stored.
  private FieldDecl FieldDeclaration.fieldDecl = null;

  public FieldDecl FieldDeclaration.getFieldDecl() {
    return fieldDecl;
  }

  public void FieldDeclaration.setFieldDecl(FieldDecl fieldDecl) {
    this.fieldDecl = fieldDecl;
  }

  // FieldDecl with single VariableDecl -> FieldDeclaration.
  rewrite FieldDecl {
    when(getNumVariableDecl() == 1)
    to FieldDeclaration {
      FieldDeclaration decl = getVariableDecl(0).createFieldDeclarationFrom(getModifiers(),
          getTypeAccess());
      decl.setStart(start); // copy location information
      decl.setEnd(end); // copy location information
      return decl;
    }
  }

  // FieldDecl with multiple VariableDecl to FieldDeclaration list.
  rewrite FieldDecl in TypeDecl.getBodyDecl() {
    when(getNumVariableDecl() > 1)
    to List {
      List varList = new List();
      for (int j = 0; j < getNumVariableDecl(); j++) {
        FieldDeclaration f = getVariableDecl(j).createFieldDeclarationFrom(
            (Modifiers) getModifiers().treeCopyNoTransform(),
            (Access) getTypeAccess().treeCopyNoTransform());
        if (j == 0) {
          f.setStart(start);
        } else {
          f.getModifiersNoTransform().clearLocations();
          f.getTypeAccessNoTransform().clearLocations();
        }
        f.setFieldDecl(this);
        varList.add(f);
      }
      return varList;
    }
  }

  public void ASTNode.clearLocations() {
    setStart(0);
    setEnd(0);
    for (int i = 0; i < getNumChildNoTransform(); i++) {
      getChildNoTransform(i).clearLocations();
    }
  }

  public FieldDeclaration VariableDecl.createFieldDeclarationFrom(Modifiers modifiers,
      Access type) {
    // TODO(joqvist) should treeCopy modifiers init opt etc?
    FieldDeclaration decl = new FieldDeclaration(
        modifiers,
        type.addArrayDims(getDimsList()),
        getID(),
        getInitOpt());
    decl.setStart(start); // Copy location information.
    decl.setEnd(end); // Copy location information.
    decl.IDstart = IDstart;
    decl.IDend = IDend;
    return decl;
  }

  /** Modifiers are same as the parent declaration (e.g. VarDeclStmt). */
  syn lazy Modifiers VariableDecl.getModifiers() = declarationModifiers();

  /** Inherited attribute computing the modifiers of the parent declaration. */
  inh lazy Modifiers VariableDecl.declarationModifiers();

  eq VarDeclStmt.getVariableDecl(int index).declarationModifiers() = getModifiers();

  eq FieldDecl.getVariableDecl(int index).declarationModifiers() = getModifiers();

  /** Type access is copied from the parent declaration, with added array dimensions. */
  syn lazy Access VariableDecl.getTypeAccess() =
      ((Access) declarationType().treeCopyNoTransform()).addArrayDims(getDimsList());

  /** Inherited attribute computing the type access of the parent declaration. */
  inh lazy Access VariableDecl.declarationType();

  eq VarDeclStmt.getVariableDecl(int index).declarationType() = getTypeAccess();

  eq FieldDecl.getVariableDecl(int index).declarationType() = getTypeAccess();
}
