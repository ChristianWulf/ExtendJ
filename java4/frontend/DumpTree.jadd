/* Copyright (c) 2005-2008, Torbjorn Ekman
 *               2014-2015, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Helper methods for dumping the AST to a string.
 */
aspect DumpTree {
  public String ASTNode.dumpTree() {
    StringBuffer sb = new StringBuffer();
    dumpTree(sb, 0);
    return sb.toString();
  }

  public void ASTNode.dumpTree(StringBuffer sb, int j) {
    for (int i = 0; i < j; i++) {
      sb.append("  ");
    }
    sb.append(dumpString() + "\n");
    for (int i = 0; i < getNumChild(); i++) {
      getChild(i).dumpTree(sb, j + 1);
    }
  }

  public String ASTNode.dumpTreeNoRewrite() {
    StringBuffer sb = new StringBuffer();
    dumpTreeNoRewrite(sb, 0);
    return sb.toString();
  }

  protected void ASTNode.dumpTreeNoRewrite(StringBuffer sb, int indent) {
    for (int i = 0; i < indent; i++) {
      sb.append("  ");
    }
    sb.append(dumpString());
    sb.append("\n");
    for (int i = 0; i < getNumChildNoTransform(); i++) {
      getChildNoTransform(i).dumpTreeNoRewrite(sb, indent+1);
    }
  }

  public String Program.dumpTree() {
    StringBuffer sb = new StringBuffer();
    for (Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit cu = (CompilationUnit)iter.next();
      if (cu.fromSource()) {
        sb.append(cu.dumpTree());
      }
    }
    return sb.toString();
  }

  syn String ASTNode.dumpString() = getClass().getName();
  eq CompilationUnit.dumpString() = getClass().getName() + " [" + getPackageDecl() + "]";
  eq VarAccess.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq MethodAccess.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq TypeAccess.dumpString() = getClass().getName() + " [" + getPackage() + ", " + getID() + "]";
  eq PrimitiveTypeAccess.dumpString() = getClass().getName() + " [" + getName() + "]";
  eq ArrayTypeAccess.dumpString() = getClass().getName();
  eq PackageAccess.dumpString() = getClass().getName() + " [" + getPackage() + "]";
  eq ParseName.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq TypeDecl.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq FieldDeclaration.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq VariableDeclaration.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq ParameterDeclaration.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq MethodDecl.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq Modifier.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq Literal.dumpString() = getClass().getName() + " [" + getLITERAL() + "]";
  eq BoundTypeAccess.dumpString() = getClass().getName() + " [" + getTypeDecl().fullName() + "]";

}
