/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 *
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

aspect FrontendMain {
  protected long Program.javaParseTime;
  protected long Program.bytecodeParseTime;
  protected long Program.codeGenTime;
  protected long Program.errorCheckTime;
  protected int Program.numJavaFiles;
  protected int Program.numClassFiles;

  public class Frontend {
    protected Program program;

    protected Frontend() {
      program = new Program();
      program.state().reset();
    }

    public boolean process(String[] args, BytecodeReader reader, JavaParser parser) {
      long start;

      // reset statistics
      program.javaParseTime = 0;
      program.bytecodeParseTime = 0;
      program.codeGenTime = 0;
      program.errorCheckTime = 0;
      program.numJavaFiles = 0;
      program.numClassFiles = 0;

      program.initBytecodeReader(reader);
      program.initJavaParser(parser);

      initOptions();
      processArgs(args);

      Collection files = program.options().files();

      if(program.options().hasOption("-version")) {
        printVersion();
        return true;
      }

      if(program.options().hasOption("-help") || files.isEmpty()) {
        printUsage();
        return true;
      }

      try {
        for(Iterator iter = files.iterator(); iter.hasNext(); ) {
          String name = (String)iter.next();
          if(!new File(name).exists())
            System.err.println("WARNING: file \"" + name + "\" does not exist");
          program.addSourceFile(name);
        }

        for(Iterator iter = program.compilationUnitIterator(); iter.hasNext(); ) {
          CompilationUnit unit = (CompilationUnit)iter.next();
          if(unit.fromSource()) {
            try {
              Collection errors = unit.parseErrors();
              Collection warnings = new LinkedList();
              // compute static semantic errors when there are no parse errors
              // or the recover from parse errors option is specified
              if(errors.isEmpty() || program.options().hasOption("-recover")) {
                start = System.currentTimeMillis();
                unit.errorCheck(errors, warnings);
                program.errorCheckTime += System.currentTimeMillis() - start;
              }
              if(!errors.isEmpty()) {
                processErrors(errors, unit);
                return false;
              } else {
                if(!warnings.isEmpty()) {
                  processWarnings(warnings, unit);
                }
                start = System.currentTimeMillis();
                processNoErrors(unit);
                program.codeGenTime += System.currentTimeMillis() - start;
              }
            } catch (Throwable t) {
              System.err.println("Errors:");
              System.err.println("Fatal exception while processing " +
                  unit.pathName() + ":");
              t.printStackTrace(System.err);
              return false;
            }
          }
        }
      } catch (Throwable t) {
        System.err.println("Errors:");
        System.err.println("Fatal exception:");
        t.printStackTrace(System.err);
        return false;
      } finally {
        if (program.options().hasOption("-profile")) {
          System.out.println("javaParseTime: " + program.javaParseTime);
          System.out.println("numJavaFiles: " + program.numJavaFiles);
          System.out.println("bytecodParseTime: " + program.javaParseTime);
          System.out.println("numClassFiles: " + program.numClassFiles);
          System.out.println("errorCheckTime: " + program.errorCheckTime);
          System.out.println("codeGenTime: " + program.codeGenTime);
        }
      }
      return true;
    }

    protected void initOptions() {
      Options options = program.options();
      options.initOptions();
      options.addKeyOption("-version");
      options.addKeyOption("-print");
      options.addKeyOption("-g");
      options.addKeyOption("-g:none");
      options.addKeyOption("-g:lines,vars,source");
      options.addKeyOption("-nowarn");
      options.addKeyOption("-verbose");
      options.addKeyOption("-deprecation");
      options.addKeyValueOption("-classpath");
      options.addKeyValueOption("-cp");
      options.addKeyValueOption("-sourcepath");
      options.addKeyValueOption("-bootclasspath");
      options.addKeyValueOption("-extdirs");
      options.addKeyValueOption("-d");
      options.addKeyValueOption("-encoding");
      options.addKeyValueOption("-source");
      options.addKeyValueOption("-target");
      options.addKeyOption("-help");
      options.addKeyOption("-O");
      options.addKeyOption("-J-Xmx128M");
      options.addKeyOption("-recover");
      options.addKeyOption("-profile"); // output profiling information
    }
    protected void processArgs(String[] args) {
      program.options().addOptions(args);
    }

    protected void processErrors(Collection errors, CompilationUnit unit) {
      System.err.println("Errors:");
      for(Iterator iter2 = errors.iterator(); iter2.hasNext(); ) {
        System.err.println(iter2.next());
      }
    }
    protected void processWarnings(Collection warnings, CompilationUnit unit) {
      System.err.println("Warnings:");
      for(Iterator iter2 = warnings.iterator(); iter2.hasNext(); ) {
        System.err.println(iter2.next());
      }
    }
    protected void processNoErrors(CompilationUnit unit) {
    }

    protected void printUsage() {
      printLongVersion();
      System.out.println(
          "\n" + name() + "\n\n" +
          "Usage: java " + name() + " <options> <source files>\n" +
          "  -verbose                  Output messages about what the compiler is doing\n" +
          "  -classpath <path>         Specify where to find user class files\n" +
          "  -sourcepath <path>        Specify where to find input source files\n" +
          "  -bootclasspath <path>     Override location of bootstrap class files\n" +
          "  -extdirs <dirs>           Override location of installed extensions\n" +
          "  -d <directory>            Specify where to place generated class files\n" +
          "  -help                     Print a synopsis of standard options\n" +
          "  -version                  Print version information\n"
          );
    }

    protected void printLongVersion() {
      System.out.println(name() + " " + url() + " Version " + version());
    }

    protected void printVersion() {
      System.out.println(name() + " " + version());
    }

    protected String name() {
      return "Java1.4Frontend";
    }
    protected String url() {
      return "(http://jastadd.cs.lth.se)";
    }

    protected String version() {
      return "R20070504";
    }
  }
}
