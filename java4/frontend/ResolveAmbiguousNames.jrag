/* Copyright (c) 2005-2008, Torbjorn Ekman
 *               2015-2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.*;

aspect AccessTypes {
  syn boolean Expr.isTypeAccess() = false;
  eq TypeAccess.isTypeAccess() = true;
  eq AbstractDot.isTypeAccess() = getRight().isTypeAccess();

  syn boolean Expr.isMethodAccess() = false;
  eq AbstractDot.isMethodAccess() = getRight().isMethodAccess();
  eq MethodAccess.isMethodAccess() = true;

  syn boolean Expr.isFieldAccess() = false;
  eq AbstractDot.isFieldAccess() = getRight().isFieldAccess();
  syn lazy boolean VarAccess.isFieldAccess() =
      decl().isClassVariable() || decl().isInstanceVariable();

  syn boolean Expr.isSuperAccess() = false;
  eq AbstractDot.isSuperAccess() = getRight().isSuperAccess();
  eq SuperAccess.isSuperAccess() = true;
  eq ParExpr.isSuperAccess() = getExpr().isSuperAccess();
  eq CastExpr.isSuperAccess() = getExpr().isSuperAccess();

  syn boolean Expr.isThisAccess() = false;
  eq AbstractDot.isThisAccess() = getRight().isThisAccess();
  eq ThisAccess.isThisAccess() = true;
  eq ParExpr.isThisAccess() = getExpr().isThisAccess();
  eq CastExpr.isThisAccess() = getExpr().isThisAccess();

  syn boolean Expr.isPackageAccess() = false;
  eq AbstractDot.isPackageAccess() = getRight().isPackageAccess();
  eq PackageAccess.isPackageAccess() = true;

  syn boolean Expr.isArrayAccess() = false;
  eq AbstractDot.isArrayAccess() = getRight().isArrayAccess();
  eq ArrayAccess.isArrayAccess() = true;

  syn boolean Expr.isClassAccess() = false;
  eq AbstractDot.isClassAccess() = getRight().isClassAccess();
  eq ClassAccess.isClassAccess() = true;

  syn boolean Expr.isSuperConstructorAccess() = false;
  eq AbstractDot.isSuperConstructorAccess() = getRight().isSuperConstructorAccess();
  eq SuperConstructorAccess.isSuperConstructorAccess() = true;
}

aspect QualifiedNames {
  inh boolean Expr.isLeftChildOfDot();

  //eq ASTNode.getChild().isLeftChildOfDot() = false;
  eq Dot.getLeft().isLeftChildOfDot() = true;
  eq Dot.getRight().isLeftChildOfDot() = false;

  eq Access.getChild().isLeftChildOfDot() = false;
  eq Expr.getChild().isLeftChildOfDot() = false;
  eq Stmt.getChild().isLeftChildOfDot() = false;
  eq Declarator.getChild().isLeftChildOfDot() = false;
  eq BodyDecl.getChild().isLeftChildOfDot() = false;
  eq TypeDecl.getChild().isLeftChildOfDot() = false;
  eq ImportDecl.getChild().isLeftChildOfDot() = false;
  eq Modifier.getChild().isLeftChildOfDot() = false;

  inh boolean Expr.isRightChildOfDot();

  //eq ASTNode.getChild().isLeftChildOfDot() = false;
  eq Dot.getLeft().isRightChildOfDot() = isRightChildOfDot();
  eq Dot.getRight().isRightChildOfDot() = true;

  eq MethodAccess.getArg().isRightChildOfDot() = false;
  eq MethodAccess.getChild().isRightChildOfDot() = isRightChildOfDot();
  eq Access.getChild().isRightChildOfDot() = false;
  eq Expr.getChild().isRightChildOfDot() = false;
  eq Stmt.getChild().isRightChildOfDot() = false;
  eq Declarator.getChild().isRightChildOfDot() = false;
  eq BodyDecl.getChild().isRightChildOfDot() = false;
  eq TypeDecl.getChild().isRightChildOfDot() = false;
  eq ImportDecl.getChild().isRightChildOfDot() = false;
  eq Modifier.getChild().isRightChildOfDot() = false;

  inh Expr Expr.prevExpr();

  eq Dot.getLeft().prevExpr() = prevExpr();
  eq Dot.getRight().prevExpr() = getLeft();

  eq MethodAccess.getArg().prevExpr() = prevExprError();
  eq MethodAccess.getChild().prevExpr() = prevExpr();
  eq Access.getChild().prevExpr() = prevExprError();
  eq Expr.getChild().prevExpr() = prevExprError();
  eq Stmt.getChild().prevExpr() = prevExprError();
  eq Declarator.getChild().prevExpr() = prevExprError();
  eq BodyDecl.getChild().prevExpr() = prevExprError();
  eq TypeDecl.getChild().prevExpr() = prevExprError();
  eq ImportDecl.getChild().prevExpr() = prevExprError();
  eq Modifier.getChild().prevExpr() = prevExprError();

  /**
   * Helper method to throw an error when prevExpr is evaluated somewhere where
   * the attribute can not be evaluated.
   */
  protected Expr ASTNode.prevExprError() {
    throw new Error("prevExpr can not be evaluated outside of the right side of a Dot access.");
  }

  inh Access Expr.nextAccess();

  eq Dot.getLeft().nextAccess() = getRight();
  eq Dot.getRight().nextAccess() = nextAccessError();

  eq Access.getChild().nextAccess() = nextAccessError();
  eq Expr.getChild().nextAccess() = nextAccessError();
  eq Stmt.getChild().nextAccess() = nextAccessError();
  eq Declarator.getChild().nextAccess() = nextAccessError();
  eq BodyDecl.getChild().nextAccess() = nextAccessError();
  eq TypeDecl.getChild().nextAccess() = nextAccessError();
  eq ImportDecl.getChild().nextAccess() = nextAccessError();
  eq Modifier.getChild().nextAccess() = nextAccessError();

  /**
   * Helper method to throw an error when nextAccess is evaluated somewhere
   * where the attribute can not be evaluated.
   */
  protected Access ASTNode.nextAccessError() {
    throw new Error("nextAccess can not be evaluated outside of the left side of a Dot access.");
  }

  syn boolean Access.isQualified() = hasPrevExpr();
  eq AbstractDot.isQualified() = hasParentDot();

  syn Expr Access.qualifier() = prevExpr();

  syn Expr AbstractDot.leftSide() = getLeft();

  syn Access AbstractDot.rightSide() = getRight() instanceof AbstractDot ?
    (Access)((AbstractDot) getRight()).getLeft() : (Access) getRight();

  syn Access Access.lastAccess() = this;
  eq AbstractDot.lastAccess() = getRight().lastAccess();

  syn AbstractDot Expr.parentDot() = getParent() instanceof AbstractDot ?
    (AbstractDot) getParent() : null;
  syn boolean Expr.hasParentDot() = parentDot() != null;

  syn boolean Expr.hasNextAccess() = isLeftChildOfDot();

  syn boolean Access.hasPrevExpr() = isRightChildOfDot();

  // Access.hasPrevExpr() is part of circular attribute/rewrite dependency:
  // rewrite ParseName -> hasPrev() -> isRightChildOfDot() -> getRight() -> rewrite.
  uncache Access.hasPrevExpr();

  public Dot Dot.lastDot() {
    Dot node = this;
    while (node.getRightNoTransform() instanceof Dot) {
      node = (Dot) node.getRightNoTransform();
    }
    return node;
  }

  /**
   * Creates a qualified expression. This will not be subject to rewriting.
   */
  public Dot Expr.qualifiesAccess(Access access) {
    Dot dot = new Dot(this, access);
    dot.setStart(this.getStart());
    dot.setEnd(access.getEnd());
    return dot;
  }

  public Dot Dot.qualifiesAccess(Access access) {
    Dot lastDot = lastDot();
    Expr l = lastDot.getRightNoTransform();
    Dot dot = new Dot(lastDot.getRightNoTransform(), access);
    dot.setStart(l.getStart());
    dot.setEnd(access.getEnd());
    lastDot.setRight(dot);
    return this;
  }

  /**
   * Used when replacing pairs from a list to concatenate the result to the
   * tail of the current location.
   */
  private Access Dot.qualifyTailWith(Access expr) {
    if (getRight() instanceof AbstractDot) {
      AbstractDot dot = (AbstractDot) getRight();
      return expr.qualifiesAccess(dot.getRight().treeCopyNoTransform());
    }
    return expr;
  }

  /**
   * These are used by the parser to extract the last name which will be
   * replaced by a method name.
   */
  public Access AbstractDot.extractLast() {
    return getRightNoTransform();
  }

  public void AbstractDot.replaceLast(Access access) {
    setRight(access);
  }

  public Access Dot.extractLast() {
    return lastDot().getRightNoTransform();
  }

  public void Dot.replaceLast(Access access) {
    lastDot().setRight(access);
  }

  public Access Access.addArrayDims(List list) {
    Access a = this;
    for (int i = 0; i < list.getNumChildNoTransform(); i++) {
      Dims dims = (Dims) list.getChildNoTransform(i);
      Opt<Expr> opt = dims.getExprOpt();
      if (opt.getNumChildNoTransform() == 1) {
        a = new ArrayTypeWithSizeAccess(a, (Expr) opt.getChildNoTransform(0));
      } else {
        a = new ArrayTypeAccess(a);
      }
      a.setStart(dims.start());
      a.setEnd(dims.end());
    }
    return a;
  }

}

aspect NameResolution {

  syn boolean Expr.isParseName() = false;

  eq ParseName.isParseName() = true;

  // This rewrite replaces a parsed name with a name reclassified according to context.
  // This is done upon first access to a name node.
  rewrite ParseName {
    when (!hasPrevExpr() || !prevExpr().isParseName()) // Ensure rewrites happen left-to-right.
    to Access {
      switch (nameType()) {
        case PACKAGE_NAME:
          return new PackageAccess(name(), start, end);
        case TYPE_NAME:
          return new TypeAccess(name(), start, end);
        case PACKAGE_OR_TYPE_NAME:
          if (lookupType(name()).isEmpty()) {
            return new PackageAccess(name(), start, end);
          } else {
            return new TypeAccess(name(), start, end);
          }
        case AMBIGUOUS_NAME:
          if (!lookupVariable(name()).isEmpty()) {
              return new VarAccess(name(), start(), end());
          } else {
            if (lookupType(name()).isEmpty()) {
              return new PackageAccess(name(), start(), end());
            } else {
              return new TypeAccess(name(), start(), end());
            }
          }
        case EXPRESSION_NAME:
          return new VarAccess(name(), start, end);
        case NOT_CLASSIFIED:
        default:
          throw new Error("Failure in name classification: unknown name type encountered");
      }
    }
  }

  rewrite Dot {
    when (leftSide().isPackageAccess() && rightSide().isPackageAccess())
    to Access {
      // Collapse package accesses.
      PackageAccess left = (PackageAccess) leftSide();
      PackageAccess right = (PackageAccess) rightSide();
      PackageAccess result = new PackageAccess(left.getPackage() + "." + right.getPackage());
      result.setStart(left.start());
      result.setEnd(right.end());
      return qualifyTailWith(result);
    }

    when (leftSide().isPackageAccess()
        && !((Access) leftSide()).hasPrevExpr() && rightSide() instanceof TypeAccess)
    to Access {
      // Collapse package with type access.
      PackageAccess left = (PackageAccess) leftSide();
      TypeAccess right = (TypeAccess) rightSide();
      TypeAccess result = new TypeAccess(left.getPackage(), right.getID());
      result.setStart(left.start());
      result.setEnd(right.end());
      return qualifyTailWith(result);
    }
  }

}

